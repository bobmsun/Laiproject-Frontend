Module 帮我们解决的问题
1. 引入时的变量污染
2. 文件关系不清晰
3. 文件的顺序
Module 的使用
在 html 中，使用 html 标签 <script type="module">
webpack / node
语法
向内引入 import，向外暴露 export
export: 1. 直接暴露     2. export default
import: 1. import {}  2. import * as 别名  3. import name


下面讲 project (project setup)
到目前为止，我们的 JS 文件的运行环境是 browser；在 html 文件中通过 script 标签引入

下面我们安装 node.JS
Node 是一个运行环境，供 JS 来运行；
Node 还提供了很多 API 供我们使用，例如，fs 模块 -> 读取本地文件

我们用 create-react-app 这个脚手架 （脚手架英文：boilerplate）

可用的 IDE：webstrom, vscode, atom
intelliJ 也可以，但必须是 ultimate 版本的，ultimate 版才支持 javascript，community 版不支持

LTS version - long term support (latest stable varsion)

下载安装 node 时，自动安装 npm
npm —— JS 的一个 包管理器
可以到 npm 的官网上，npmjs.com 可以通过 npm 下载什么库

npx create-react-app around-web
这个指令帮我们搭建一个 开发 React 的环境
npx 可以理解为是 npm 的高阶版
create-react-app 是一个第三方的库，library，是由 FB 开源的
run 后帮我们创建开发环境

npx create-react-app around-web
这句话相当于两个操作：
1. npm install -g create-react-app
    npm install -> 是下载第三方的library
    -g 表示 全局安装 global install
2. 然后用 create-react-app 帮我搭建一个project
（npx 其实本质是 npm）

可以用 IDE create 一个 React project，但是 实际开发中，通常是像我们这里一样用 CLI 创建 project

npm start 后，用 crtl + C 终止

创建好的project 中，package.json 中 有一个 script，下面的 command 就是我们可以 run 的 command
